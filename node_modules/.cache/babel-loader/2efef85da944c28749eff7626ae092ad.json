{"ast":null,"code":"import { ARTIST_TYPE, ARTISTS_INFO, CURRENT_ARTIST, ARTIST_UNLIKED, ARTIST_LIKED, CURR_CATEGORY_ARTIST_INFO } from \"../types\";\nimport axios from \"axios\";\nexport const currentArtistType = artist => async dispatch => {\n  try {\n    dispatch({\n      type: ARTIST_TYPE,\n      payload: artist\n    });\n  } catch (error) {//TODO\n  }\n};\nexport const artistsInfo = (artistType, titles) => async dispatch => {\n  try {\n    console.log(\"Start executing calls inside for\");\n    axios.all(titles.map(title => axios.get(`/artist/${artistType}/title/${title}`))).then(axios.spread(function (...res) {\n      // all requests are now complete\n      console.log(\"final response is\" + res);\n      dispatch({\n        type: ARTISTS_INFO,\n        payload: res\n      });\n    }));\n  } catch (error) {\n    console.log(\"Error is \" + error);\n  }\n};\nexport const currCategoryArtistInfo = (artistType, title) => async dispatch => {\n  try {\n    console.log(\"Start executing calls inside for\");\n    const res = await axios.get(`/artist/${artistType}/title/${title}`);\n    dispatch({\n      type: CURR_CATEGORY_ARTIST_INFO,\n      payload: res.data\n    });\n  } catch (error) {\n    console.log(\"Error is \" + error);\n  }\n}; ////Like artist\n\nexport const likeUnLikeArtist = (artistType, likeUnlikeInfo, likeUnLike) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  await axios.post(`/artist/${artistType}/rate/${likeUnLike}`, likeUnlikeInfo, config);\n  const action = likeUnLike === \"like\" ? ARTIST_LIKED : ARTIST_UNLIKED;\n  dispatch({\n    type: action,\n    payload: likeUnlikeInfo\n  }); //Nothing needed from backend just dispatch to reducer and tell it to update state.\n}; //Fetch current artist Info\n\nexport const currentArtistInfo = (artistType, artistName) => async dispatch => {\n  try {\n    const res = await axios.get(`/artist/${artistType}/name/${artistName}`);\n    const id = res.data[0]._id;\n    const songs = await axios.get(`/song/${artistType}/${id}`);\n    res.data[0].songs = songs.data;\n    console.log(JSON.stringify(res.data[0].songs));\n    dispatch({\n      type: CURRENT_ARTIST,\n      payload: res.data[0]\n    });\n  } catch (error) {//TODO\n  }\n};","map":{"version":3,"sources":["C:/Users/bisht/Project/DHH/dhh/client/src/state/actions/artistAction.js"],"names":["ARTIST_TYPE","ARTISTS_INFO","CURRENT_ARTIST","ARTIST_UNLIKED","ARTIST_LIKED","CURR_CATEGORY_ARTIST_INFO","axios","currentArtistType","artist","dispatch","type","payload","error","artistsInfo","artistType","titles","console","log","all","map","title","get","then","spread","res","currCategoryArtistInfo","data","likeUnLikeArtist","likeUnlikeInfo","likeUnLike","config","headers","post","action","currentArtistInfo","artistName","id","_id","songs","JSON","stringify"],"mappings":"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","sourcesContent":["import {\r\n  ARTIST_TYPE,\r\n  ARTISTS_INFO,\r\n  CURRENT_ARTIST,\r\n  ARTIST_UNLIKED,\r\n  ARTIST_LIKED,\r\n  CURR_CATEGORY_ARTIST_INFO,\r\n} from \"../types\";\r\nimport axios from \"axios\";\r\nexport const currentArtistType = (artist) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: ARTIST_TYPE,\r\n      payload: artist,\r\n    });\r\n  } catch (error) {\r\n    //TODO\r\n  }\r\n};\r\n\r\nexport const artistsInfo = (artistType, titles) => async (dispatch) => {\r\n  try {\r\n    console.log(\"Start executing calls inside for\");\r\n    axios\r\n      .all(\r\n        titles.map((title) => axios.get(`/artist/${artistType}/title/${title}`))\r\n      )\r\n      .then(\r\n        axios.spread(function (...res) {\r\n          // all requests are now complete\r\n          console.log(\"final response is\" + res);\r\n          dispatch({\r\n            type: ARTISTS_INFO,\r\n            payload: res,\r\n          });\r\n        })\r\n      );\r\n  } catch (error) {\r\n    console.log(\"Error is \" + error);\r\n  }\r\n};\r\nexport const currCategoryArtistInfo =\r\n  (artistType, title) => async (dispatch) => {\r\n    try {\r\n      console.log(\"Start executing calls inside for\");\r\n\r\n      const res = await axios.get(`/artist/${artistType}/title/${title}`);\r\n\r\n      dispatch({\r\n        type: CURR_CATEGORY_ARTIST_INFO,\r\n        payload: res.data,\r\n      });\r\n    } catch (error) {\r\n      console.log(\"Error is \" + error);\r\n    }\r\n  };\r\n////Like artist\r\n\r\nexport const likeUnLikeArtist =\r\n  (artistType, likeUnlikeInfo, likeUnLike) => async (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    await axios.post(\r\n      `/artist/${artistType}/rate/${likeUnLike}`,\r\n      likeUnlikeInfo,\r\n      config\r\n    );\r\n    const action = likeUnLike === \"like\" ? ARTIST_LIKED : ARTIST_UNLIKED;\r\n    dispatch({\r\n      type: action,\r\n      payload: likeUnlikeInfo,\r\n    });\r\n    //Nothing needed from backend just dispatch to reducer and tell it to update state.\r\n  };\r\n\r\n//Fetch current artist Info\r\nexport const currentArtistInfo =\r\n  (artistType, artistName) => async (dispatch) => {\r\n    try {\r\n      const res = await axios.get(`/artist/${artistType}/name/${artistName}`);\r\n      const id = res.data[0]._id;\r\n      const songs = await axios.get(`/song/${artistType}/${id}`);\r\n      res.data[0].songs = songs.data;\r\n      console.log(JSON.stringify(res.data[0].songs));\r\n\r\n      dispatch({\r\n        type: CURRENT_ARTIST,\r\n        payload: res.data[0],\r\n      });\r\n    } catch (error) {\r\n      //TODO\r\n    }\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}