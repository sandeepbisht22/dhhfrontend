{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bisht\\\\Project\\\\DHH\\\\dhh\\\\client\\\\src\\\\component\\\\common\\\\Songs.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Songs = () => {\n  _s();\n\n  const currArtist = useSelector(state => state.artist.currArtist);\n  const songsList = currArtist.songs;\n  return songsList !== null && /*#__PURE__*/_jsxDEV(Fragment, {\n    children: songsList.map(song => {\n      /*#__PURE__*/\n      _jsxDEV(\"div\", {\n        children: song.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Songs, \"Eb/LbZROd+TYDJHGTGgTAGRSr5g=\", false, function () {\n  return [useSelector];\n});\n\n_c = Songs;\nexport default Songs;\n\nvar _c;\n\n$RefreshReg$(_c, \"Songs\");","map":{"version":3,"sources":["C:/Users/bisht/Project/DHH/dhh/client/src/component/common/Songs.js"],"names":["React","Fragment","useEffect","useSelector","Songs","currArtist","state","artist","songsList","songs","map","song","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB,QAAMC,UAAU,GAAGF,WAAW,CAAEG,KAAD,IAAWA,KAAK,CAACC,MAAN,CAAaF,UAAzB,CAA9B;AACA,QAAMG,SAAS,GAAGH,UAAU,CAACI,KAA7B;AACA,SACED,SAAS,KAAK,IAAd,iBACE,QAAC,QAAD;AAAA,cACGA,SAAS,CAACE,GAAV,CAAeC,IAAD,IAAU;AACvB;AAAA;AAAA,kBAAMA,IAAI,CAACC;AAAX;AAAA;AAAA;AAAA;AAAA;AACD,KAFA;AADH;AAAA;AAAA;AAAA;AAAA,UAFJ;AASD,CAZD;;GAAMR,K;UACeD,W;;;KADfC,K;AAcN,eAAeA,KAAf","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Songs = () => {\r\n  const currArtist = useSelector((state) => state.artist.currArtist);\r\n  const songsList = currArtist.songs;\r\n  return (\r\n    songsList !== null && (\r\n      <Fragment>\r\n        {songsList.map((song) => {\r\n          <div>{song.name}</div>;\r\n        })}\r\n      </Fragment>\r\n    )\r\n  );\r\n};\r\n\r\nexport default Songs;\r\n"]},"metadata":{},"sourceType":"module"}