{"ast":null,"code":"import React,{useEffect}from\"react\";import{GoogleLogin}from\"react-google-login\";import{alertActions,userActions}from\"../../state/actions\";import{useDispatch,useSelector}from\"react-redux\";import{useNavigate}from\"react-router\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var generator=require(\"generate-password\");var LoginGoogle=function LoginGoogle(){var dispatch=useDispatch();var navigate=useNavigate();var onSuccess=function onSuccess(res){try{dispatch(userActions.loginViaGoogle(res.profileObj.email));}catch(error){console.log(\"Error while loggin in via gogle. User does not exist. Creating new user \");var password=generator.generate({length:10,numbers:true});var user={name:res.profileObj.name,email:res.profileObj.email,usersource:\"google\",password:password};dispatch(userActions.signUpUser(user));}};var onFailure=function onFailure(){console.log(\"Login Fail\");};var isAuthenticated=useSelector(function(state){return state.user.isAuthenticated;});var error=useSelector(function(state){return state.user.error;});var value=process.env.REACT_APP_GOOGLE_O_AUTH_CLIENT_ID;useEffect(function(){if(isAuthenticated){navigate(\"/\");}else if(error===\"invalid Email\"||error===\"invalid Password\"){dispatch(alertActions.setAlert(error,\"danger\"));dispatch(userActions.clearErrors());}},[error,isAuthenticated,navigate]);return/*#__PURE__*/_jsx(\"div\",{className:\"pb-3\",children:/*#__PURE__*/_jsx(GoogleLogin,{clientId:value,buttonText:\"Login this shit\",render:function render(renderProps){return/*#__PURE__*/_jsxs(\"button\",{onClick:renderProps.onClick,disabled:renderProps.disabled,style:{backgroundColor:\"#272727\",color:\"#61892F\"},children:[/*#__PURE__*/_jsx(\"a\",{href:\"!#\",children:/*#__PURE__*/_jsx(\"i\",{className:\"fab fa-google fa-3x\",style:{color:\"grey\"}})}),/*#__PURE__*/_jsx(\"div\",{children:\"Login via Google\"})]});},onSuccess:onSuccess,onFailure:onFailure,cookiePolicy:\"single_host_origin\",className:\"mt-5\",isSignedIn:true})});};export default LoginGoogle;","map":{"version":3,"sources":["C:/Users/bisht/Project/deployment/dhh/client/src/component/auth/LoginGoogle.js"],"names":["React","useEffect","GoogleLogin","alertActions","userActions","useDispatch","useSelector","useNavigate","generator","require","LoginGoogle","dispatch","navigate","onSuccess","res","loginViaGoogle","profileObj","email","error","console","log","password","generate","length","numbers","user","name","usersource","signUpUser","onFailure","isAuthenticated","state","value","process","env","REACT_APP_GOOGLE_O_AUTH_CLIENT_ID","setAlert","clearErrors","renderProps","onClick","disabled","backgroundColor","color"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { GoogleLogin } from \"react-google-login\";\r\nimport { alertActions, userActions } from \"../../state/actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useNavigate } from \"react-router\";\r\nvar generator = require(\"generate-password\");\r\n\r\nconst LoginGoogle = () => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const onSuccess = (res) => {\r\n    try {\r\n      dispatch(userActions.loginViaGoogle(res.profileObj.email));\r\n    } catch (error) {\r\n      console.log(\r\n        \"Error while loggin in via gogle. User does not exist. Creating new user \"\r\n      );\r\n      var password = generator.generate({\r\n        length: 10,\r\n        numbers: true,\r\n      });\r\n      const user = {\r\n        name: res.profileObj.name,\r\n        email: res.profileObj.email,\r\n        usersource: \"google\",\r\n        password: password,\r\n      };\r\n\r\n      dispatch(userActions.signUpUser(user));\r\n    }\r\n  };\r\n\r\n  const onFailure = () => {\r\n    console.log(\"Login Fail\");\r\n  };\r\n  const isAuthenticated = useSelector((state) => state.user.isAuthenticated);\r\n  const error = useSelector((state) => state.user.error);\r\n\r\n  const value = process.env.REACT_APP_GOOGLE_O_AUTH_CLIENT_ID;\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      navigate(\"/\");\r\n    } else if (error === \"invalid Email\" || error === \"invalid Password\") {\r\n      dispatch(alertActions.setAlert(error, \"danger\"));\r\n      dispatch(userActions.clearErrors());\r\n    }\r\n  }, [error, isAuthenticated, navigate]);\r\n  return (\r\n    <div className=\"pb-3\">\r\n      <GoogleLogin\r\n        clientId={value}\r\n        buttonText=\"Login this shit\"\r\n        render={(renderProps) => (\r\n          <button\r\n            onClick={renderProps.onClick}\r\n            disabled={renderProps.disabled}\r\n            style={{ backgroundColor: \"#272727\", color: \"#61892F\" }}\r\n          >\r\n            <a href=\"!#\">\r\n              <i className=\"fab fa-google fa-3x\" style={{ color: \"grey\" }}></i>\r\n            </a>\r\n            <div>Login via Google</div>\r\n          </button>\r\n        )}\r\n        onSuccess={onSuccess}\r\n        onFailure={onFailure}\r\n        cookiePolicy={\"single_host_origin\"}\r\n        className=\"mt-5\"\r\n        isSignedIn={true}\r\n      ></GoogleLogin>\r\n    </div>\r\n  );\r\n};\r\nexport default LoginGoogle;\r\n"]},"metadata":{},"sourceType":"module"}